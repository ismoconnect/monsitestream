rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Conversation files
    match /conversations/{conversationId}/files/{fileName} {
      allow read, write: if request.auth != null && 
        request.auth.uid in firestore.get(/databases/(default)/documents/conversations/$(conversationId)).data.participants.map(p => p.uid);
    }
    
    // Stream recordings
    match /streams/{streamId}/recordings/{fileName} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == firestore.get(/databases/(default)/documents/streams/$(streamId)).data.hostId ||
         request.auth.uid in firestore.get(/databases/(default)/documents/streams/$(streamId)).data.participants);
    }
    
    // Public assets (read-only for all authenticated users)
    match /public/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.token.role == 'admin';
    }
    
    // Admin access
    match /{allPaths=**} {
      allow read, write: if request.auth != null && 
        request.auth.token.role == 'admin';
    }
  }
}
