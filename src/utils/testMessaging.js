import { simpleChatService } from '../services/simpleChat';

// Fonction pour tester la messagerie
export const runMessagingTests = async (currentUser) => {
  if (!currentUser) {
    throw new Error('Utilisateur non connect√©');
  }

  const results = {};

  try {
    // Test 1: Cr√©er une conversation
    console.log('üß™ Test 1: Cr√©ation de conversation...');
    const conversationId = await simpleChatService.getOrCreateConversation(
      currentUser.uid,
      currentUser.displayName || currentUser.email
    );
    results.conversationId = conversationId;
    console.log('‚úÖ Conversation cr√©√©e:', conversationId);

    // Test 2: Envoyer un message utilisateur
    console.log('üß™ Test 2: Envoi de message utilisateur...');
    await simpleChatService.sendMessage(
      conversationId,
      currentUser.uid,
      'Bonjour Sophie ! Ceci est un message de test depuis le syst√®me de messagerie.'
    );
    console.log('‚úÖ Message utilisateur envoy√©');

    // Test 3: Simuler une r√©ponse admin
    console.log('üß™ Test 3: Simulation de r√©ponse admin...');
    await new Promise(resolve => setTimeout(resolve, 2000)); // Attendre 2 secondes
    await simpleChatService.sendMessage(
      conversationId,
      'admin',
      'Bonjour ! Je suis Sophie, votre accompagnatrice. Comment puis-je vous aider aujourd\'hui ? üòä'
    );
    console.log('‚úÖ R√©ponse admin simul√©e');

    results.success = true;
    results.message = 'Tous les tests ont r√©ussi !';
    
    return results;
  } catch (error) {
    console.error('‚ùå Erreur dans les tests:', error);
    results.success = false;
    results.error = error.message;
    return results;
  }
};

// Fonction pour nettoyer les donn√©es de test
export const cleanupTestData = async () => {
  console.log('üßπ Nettoyage des donn√©es de test...');
  // Cette fonction pourrait supprimer les conversations de test
  // Pour l'instant, on la laisse vide car les vraies conversations sont importantes
  console.log('‚úÖ Nettoyage termin√©');
};

// Fonction pour v√©rifier l'√©tat de la messagerie
export const checkMessagingStatus = async () => {
  try {
    const status = {
      firestoreConnected: false,
      rulesDeployed: false,
      serviceWorking: false
    };

    // Test de base pour v√©rifier si le service fonctionne
    if (simpleChatService) {
      status.serviceWorking = true;
    }

    // TODO: Ajouter d'autres v√©rifications
    status.firestoreConnected = true; // Supposer que c'est connect√© si pas d'erreur
    status.rulesDeployed = true; // Supposer que les r√®gles sont d√©ploy√©es

    return status;
  } catch (error) {
    console.error('Erreur lors de la v√©rification:', error);
    return {
      firestoreConnected: false,
      rulesDeployed: false,
      serviceWorking: false,
      error: error.message
    };
  }
};
