import { db } from './firebase';
import { 
  collection, 
  doc, 
  addDoc, 
  query, 
  orderBy, 
  onSnapshot,
  serverTimestamp,
  updateDoc,
  deleteDoc,
  where,
  getDocs,
  setDoc
} from 'firebase/firestore';

class SimpleChatService {
  constructor() {
    this.conversationCache = new Map(); // Cache pour √©viter les cr√©ations multiples
    this.pendingCreations = new Map(); // Promesses en cours
  }

  // Cr√©er ou r√©cup√©rer LA conversation unique entre un utilisateur et l'admin
  async getOrCreateConversation(userId, userName) {
    try {
      // V√©rifier que userId n'est pas undefined
      if (!userId) {
        throw new Error('userId est requis pour cr√©er une conversation');
      }

      console.log('getOrCreateConversation appel√© avec:', { userId, userName });
      
      // V√©rifier le cache local d'abord
      if (this.conversationCache.has(userId)) {
        console.log(`üìã Conversation trouv√©e dans le cache pour ${userId}: ${this.conversationCache.get(userId)}`);
        return this.conversationCache.get(userId);
      }
      
      // V√©rifier s'il y a d√©j√† une cr√©ation en cours
      if (this.pendingCreations.has(userId)) {
        console.log(`‚è≥ Cr√©ation en cours pour ${userId}, attente...`);
        return await this.pendingCreations.get(userId);
      }
      
      // Cr√©er une promesse pour √©viter les cr√©ations multiples
      const creationPromise = this._createOrFindConversation(userId, userName);
      this.pendingCreations.set(userId, creationPromise);
      
      try {
        const conversationId = await creationPromise;
        this.conversationCache.set(userId, conversationId);
        return conversationId;
      } finally {
        this.pendingCreations.delete(userId);
      }
    } catch (error) {
      console.error('Erreur lors de la cr√©ation/r√©cup√©ration de la conversation:', error);
      throw error;
    }
  }

  // Fonction interne pour cr√©er ou trouver une conversation
  async _createOrFindConversation(userId, userName) {
    try {
      // V√©rifier si une conversation existe d√©j√† pour cet utilisateur
      const conversationsRef = collection(db, 'conversations');
      const q = query(
        conversationsRef, 
        where('participants', 'array-contains', userId)
      );
      
      const querySnapshot = await getDocs(q);
      let conversationId = null;
      
      // Si une conversation existe d√©j√†, utiliser la premi√®re (et unique)
      if (!querySnapshot.empty) {
        // Filtrer pour trouver une conversation avec exactement userId et admin
        const existingConversations = querySnapshot.docs.filter(doc => {
          const data = doc.data();
          const participants = data.participants || [];
          return participants.includes(userId) && participants.includes('admin') && participants.length === 2;
        });
        
        if (existingConversations.length > 0) {
          // Utiliser la premi√®re conversation valide
          conversationId = existingConversations[0].id;
          console.log(`Conversation existante trouv√©e pour l'utilisateur ${userId}: ${conversationId}`);
          
          // Supprimer les conversations en double s'il y en a
          if (existingConversations.length > 1) {
            console.warn(`‚ö†Ô∏è ${existingConversations.length} conversations trouv√©es pour ${userId}, nettoyage...`);
            for (let i = 1; i < existingConversations.length; i++) {
              await deleteDoc(existingConversations[i].ref);
              console.log(`üóëÔ∏è Conversation en double supprim√©e: ${existingConversations[i].id}`);
            }
          }
          return conversationId;
        }
      }
      
      // Si aucune conversation valide trouv√©e, cr√©er une nouvelle
      console.log(`Cr√©ation d'une nouvelle conversation pour l'utilisateur ${userId}`);
      
      const conversationData = {
        participants: [userId, 'admin'], // Toujours userId + admin
        participantNames: {
          [userId]: userName,
          'admin': 'Sophie'
        },
        createdAt: serverTimestamp(),
        lastMessage: null,
        lastMessageAt: null,
        isFirstTime: true // Marquer comme premi√®re conversation
      };
      
      const docRef = await addDoc(conversationsRef, conversationData);
      conversationId = docRef.id;
      
      // Envoyer un message de bienvenue personnalis√© pour la premi√®re fois
      const welcomeMessage = `Bonjour ${userName} ! üëã\n\nJe suis Sophie, votre accompagnatrice de luxe personnelle. Je suis ravie de faire votre connaissance !\n\nCette conversation est notre espace priv√© o√π nous pouvons discuter librement de tout ce qui vous int√©resse. N'h√©sitez pas √† me parler de vos envies, vos questions, ou simplement √† faire connaissance avec moi.\n\nComment puis-je vous accompagner aujourd'hui ? üòä‚ú®`;
      
      await this.sendMessage(conversationId, 'admin', welcomeMessage);
      
      // Marquer que le message de bienvenue a √©t√© envoy√©
      await updateDoc(doc(db, 'conversations', conversationId), {
        isFirstTime: false
      });
      
      return conversationId;
    } catch (error) {
      console.error('Erreur lors de la cr√©ation/r√©cup√©ration de la conversation:', error);
      throw error;
    }
  }

  // Envoyer un message
  async sendMessage(conversationId, senderId, content) {
    try {
      const messagesRef = collection(db, 'messages');
      
      const messageData = {
        conversationId,
        senderId,
        content,
        timestamp: serverTimestamp(),
        read: false
      };
      
      const docRef = await addDoc(messagesRef, messageData);
      
      // Mettre √† jour la conversation avec le dernier message
      const conversationRef = doc(db, 'conversations', conversationId);
      await updateDoc(conversationRef, {
        lastMessage: content,
        lastMessageAt: serverTimestamp()
      });
      
      return docRef.id;
    } catch (error) {
      console.error('Erreur lors de l\'envoi du message:', error);
      throw error;
    }
  }

  // √âcouter les messages d'une conversation en temps r√©el
  listenToMessages(conversationId, callback) {
    try {
      const messagesRef = collection(db, 'messages');
      const q = query(
        messagesRef,
        where('conversationId', '==', conversationId),
        orderBy('timestamp', 'asc')
      );
      
      return onSnapshot(q, (querySnapshot) => {
        const messages = [];
        querySnapshot.forEach((doc) => {
          messages.push({
            id: doc.id,
            ...doc.data()
          });
        });
        callback(messages);
      });
    } catch (error) {
      console.error('Erreur lors de l\'√©coute des messages:', error);
      throw error;
    }
  }

  // Marquer les messages comme lus (simplifi√©)
  async markMessagesAsRead(conversationId, userId) {
    try {
      // Pour l'instant, on ne fait rien pour √©viter l'erreur d'index
      // Cette fonctionnalit√© peut √™tre ajout√©e plus tard avec l'index appropri√©
      console.log(`Messages marqu√©s comme lus pour la conversation ${conversationId}`);
    } catch (error) {
      console.error('Erreur lors du marquage comme lu:', error);
      // Ne pas lancer l'erreur pour ne pas bloquer l'interface
    }
  }

  // R√©cup√©rer toutes les conversations (pour l'admin)
  listenToAllConversations(callback) {
    try {
      const conversationsRef = collection(db, 'conversations');
      const q = query(conversationsRef, orderBy('lastMessageAt', 'desc'));
      
      return onSnapshot(q, (querySnapshot) => {
        const conversations = [];
        querySnapshot.forEach((doc) => {
          conversations.push({
            id: doc.id,
            ...doc.data()
          });
        });
        callback(conversations);
      });
    } catch (error) {
      console.error('Erreur lors de l\'√©coute des conversations:', error);
      throw error;
    }
  }

  // Fonction de nettoyage pour supprimer les conversations en double
  async cleanupDuplicateConversations() {
    try {
      console.log('üßπ Nettoyage des conversations en double...');
      const conversationsRef = collection(db, 'conversations');
      const querySnapshot = await getDocs(conversationsRef);
      
      const userConversations = new Map();
      const toDelete = [];
      
      querySnapshot.forEach((doc) => {
        const data = doc.data();
        const participants = data.participants || [];
        const userId = participants.find(p => p !== 'admin');
        
        if (userId && participants.includes('admin')) {
          if (userConversations.has(userId)) {
            // Conversation en double trouv√©e
            toDelete.push(doc);
            console.log(`üóëÔ∏è Conversation en double trouv√©e pour ${userId}: ${doc.id}`);
          } else {
            userConversations.set(userId, doc);
          }
        }
      });
      
      // Supprimer les conversations en double
      for (const doc of toDelete) {
        await deleteDoc(doc.ref);
        console.log(`‚úÖ Conversation supprim√©e: ${doc.id}`);
      }
      
      console.log(`üéâ Nettoyage termin√©. ${toDelete.length} conversations en double supprim√©es.`);
      return toDelete.length;
    } catch (error) {
      console.error('Erreur lors du nettoyage:', error);
      throw error;
    }
  }

  // === FONCTIONNALIT√âS TYPING ===

  // Indiquer qu'on est en train de taper
  async setTyping(conversationId, userId, isTyping = true) {
    try {
      const typingRef = doc(db, 'typing', `${conversationId}_${userId}`);
      
      if (isTyping) {
        await setDoc(typingRef, {
          conversationId,
          userId,
          isTyping: true,
          timestamp: serverTimestamp()
        });
      } else {
        await deleteDoc(typingRef);
      }
      
      console.log(`‚úçÔ∏è Typing ${isTyping ? 'started' : 'stopped'} for:`, userId);
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du typing:', error);
    }
  }

  // √âcouter les indicateurs de frappe pour une conversation
  listenToTyping(conversationId, currentUserId, callback) {
    try {
      const typingQuery = query(
        collection(db, 'typing'),
        where('conversationId', '==', conversationId)
      );

      const unsubscribe = onSnapshot(typingQuery, (snapshot) => {
        const typingUsers = [];
        
        snapshot.forEach((doc) => {
          const data = doc.data();
          
          // Ne pas inclure l'utilisateur actuel
          if (data.userId !== currentUserId) {
            // V√©rifier que l'indicateur n'est pas trop ancien (> 10 secondes)
            const now = new Date();
            const timestamp = data.timestamp?.toDate();
            const isRecent = timestamp && (now - timestamp) < 10000; // 10 secondes
            
            if (data.isTyping && isRecent) {
              typingUsers.push({
                userId: data.userId,
                timestamp: timestamp
              });
            }
          }
        });

        callback(typingUsers);
      }, (error) => {
        console.error('Erreur lors de l\'√©coute des typing:', error);
        callback([]);
      });

      return unsubscribe;
    } catch (error) {
      console.error('Erreur lors de l\'initialisation de l\'√©coute typing:', error);
      return () => {}; // Retourner une fonction vide
    }
  }

  // Nettoyer les anciens indicateurs de frappe (appel√© p√©riodiquement)
  async cleanupOldTyping() {
    try {
      const typingQuery = query(collection(db, 'typing'));
      const snapshot = await getDocs(typingQuery);
      
      const now = new Date();
      const toDelete = [];
      
      snapshot.forEach((doc) => {
        const data = doc.data();
        const timestamp = data.timestamp?.toDate();
        
        // Supprimer si plus ancien que 30 secondes
        if (!timestamp || (now - timestamp) > 30000) {
          toDelete.push(doc);
        }
      });

      for (const doc of toDelete) {
        await deleteDoc(doc.ref);
      }

      if (toDelete.length > 0) {
        console.log(`üßπ ${toDelete.length} anciens indicateurs de frappe supprim√©s`);
      }
    } catch (error) {
      console.error('Erreur lors du nettoyage des typing:', error);
    }
  }
}

export const simpleChatService = new SimpleChatService();
