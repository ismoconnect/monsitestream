#!/usr/bin/env node

/**
 * Script de d√©ploiement des r√®gles et index Firestore pour la messagerie
 * Usage: node scripts/deploy-messaging.js [dev|prod]
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

const environment = process.argv[2] || 'dev';

console.log(`üöÄ D√©ploiement de la messagerie en environnement: ${environment}`);

// V√©rifier que les fichiers existent
const requiredFiles = [
  'firestore.rules',
  'firestore-dev.rules',
  'firestore.indexes.json',
  'firebase.json'
];

for (const file of requiredFiles) {
  if (!fs.existsSync(file)) {
    console.error(`‚ùå Fichier manquant: ${file}`);
    process.exit(1);
  }
}

try {
  console.log('üìã V√©rification de la configuration Firebase...');
  
  // V√©rifier la configuration Firebase
  const firebaseConfig = JSON.parse(fs.readFileSync('firebase.json', 'utf8'));
  if (!firebaseConfig.firestore) {
    console.error('‚ùå Configuration Firestore manquante dans firebase.json');
    process.exit(1);
  }

  console.log('‚úÖ Configuration Firebase v√©rifi√©e');

  if (environment === 'dev') {
    console.log('üîß D√©ploiement des r√®gles de d√©veloppement...');
    
    // Sauvegarder les r√®gles actuelles
    if (fs.existsSync('firestore.rules.backup')) {
      fs.unlinkSync('firestore.rules.backup');
    }
    fs.copyFileSync('firestore.rules', 'firestore.rules.backup');
    
    // Copier les r√®gles de dev
    fs.copyFileSync('firestore-dev.rules', 'firestore.rules');
    
    console.log('‚ö†Ô∏è  ATTENTION: R√®gles de d√©veloppement activ√©es (permissives)');
    
  } else if (environment === 'prod') {
    console.log('üîí D√©ploiement des r√®gles de production...');
    
    // S'assurer qu'on utilise les r√®gles de production
    if (fs.existsSync('firestore.rules.backup')) {
      fs.copyFileSync('firestore.rules.backup', 'firestore.rules');
    }
    
    console.log('‚úÖ R√®gles de production s√©curis√©es activ√©es');
  }

  // D√©ployer les r√®gles et index
  console.log('üì§ D√©ploiement vers Firebase...');
  execSync('firebase deploy --only firestore:rules,firestore:indexes', { 
    stdio: 'inherit' 
  });

  console.log('‚úÖ D√©ploiement termin√© avec succ√®s!');
  
  // Informations post-d√©ploiement
  console.log('\nüìä Collections cr√©√©es:');
  console.log('  - conversations (conversations utilisateur-admin)');
  console.log('  - messages (messages de chaque conversation)');
  
  console.log('\nüîç Index cr√©√©s:');
  console.log('  - conversations: participants + lastMessageAt');
  console.log('  - messages: conversationId + timestamp');
  console.log('  - messages: conversationId + senderId + read');
  
  if (environment === 'dev') {
    console.log('\n‚ö†Ô∏è  RAPPEL: Environnement de d√©veloppement');
    console.log('   - R√®gles permissives actives');
    console.log('   - Ne pas utiliser en production');
    console.log('   - Pour la prod: node scripts/deploy-messaging.js prod');
  } else {
    console.log('\nüîí PRODUCTION: R√®gles s√©curis√©es actives');
    console.log('   - Acc√®s restreint aux participants');
    console.log('   - Authentification requise');
    console.log('   - Admin a acc√®s complet');
  }

  console.log('\nüß™ Pour tester:');
  console.log('   1. Connectez-vous sur l\'application');
  console.log('   2. Allez sur /messages');
  console.log('   3. Une conversation sera cr√©√©e automatiquement');
  console.log('   4. L\'admin peut r√©pondre depuis /admin');

} catch (error) {
  console.error('‚ùå Erreur lors du d√©ploiement:', error.message);
  
  // Restaurer les r√®gles en cas d'erreur
  if (environment === 'dev' && fs.existsSync('firestore.rules.backup')) {
    fs.copyFileSync('firestore.rules.backup', 'firestore.rules');
    console.log('üîÑ R√®gles restaur√©es apr√®s erreur');
  }
  
  process.exit(1);
}
