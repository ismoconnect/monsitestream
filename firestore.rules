rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // RÈGLES DE DÉVELOPPEMENT - PLUS PERMISSIVES
    // ⚠️ À NE PAS UTILISER EN PRODUCTION ⚠️
    
    // Permettre toutes les opérations sur les utilisateurs
    match /users/{userId} {
      allow read, write: if true;
      
      // Sous-collections
      match /{serviceCollection}/{serviceDoc} {
        allow read, write: if true;
      }
    }

    // Permettre toutes les opérations sur les logs admin
    match /admin_logs/{logId} {
      allow read, write: if true;
    }

    // Permettre toutes les opérations sur les admins
    match /admins/{adminId} {
      allow read, write: if true;
    }

    // RÈGLES DE MESSAGERIE
    // Collection des conversations
    match /conversations/{conversationId} {
      // Lecture : utilisateurs participants ou admin
      allow read: if request.auth != null && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid == 'admin' || 
         isAdmin());
      
      // Création : utilisateur authentifié pour sa propre conversation
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants &&
        'admin' in request.resource.data.participants;
      
      // Mise à jour : participants ou admin
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid == 'admin' || 
         isAdmin());
      
      // Suppression : admin uniquement
      allow delete: if isAdmin();
    }

    // Collection des messages
    match /messages/{messageId} {
      // Lecture : utilisateurs de la conversation ou admin
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         canAccessConversation(resource.data.conversationId) ||
         isAdmin());
      
      // Création : utilisateur authentifié
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.senderId &&
        canAccessConversation(request.resource.data.conversationId);
      
      // Mise à jour : expéditeur du message ou admin
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         isAdmin());
      
      // Suppression : expéditeur ou admin
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.senderId || 
         isAdmin());
    }

    // Règle par défaut permissive pour le développement
    match /{document=**} {
      allow read, write: if true;
    }

    // FONCTIONS HELPER
    function isAdmin() {
      return request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function canAccessConversation(conversationId) {
      return request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
    }
  }
}
